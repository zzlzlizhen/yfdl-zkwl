<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.remote.modules.group.dao.GroupMapper">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.remote.modules.group.entity.GroupEntity" id="BaseResultMap">
        <result property="groupId" column="group_id"/>
        <result property="projectId" column="project_id"/>
        <result property="groupName" column="group_name"/>
        <result property="deviceIds" column="device_ids"/>
        <result property="createName" column="create_name"/>
        <result property="createTime" column="create_time"/>
        <result property="createUser" column="create_user"/>
        <result property="updateUser" column="update_user"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="Base_Column_List" >
    group_id, group_name, create_name, create_time, create_user, update_user,update_time,project_id
    </sql>

    <select id="queryGroupByName" parameterType="com.remote.modules.group.entity.GroupQuery" resultMap="BaseResultMap" >
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        fun_group
        <where>
            project_id = #{groupQuery.projectId}
            <if test="groupQuery.groupName !=null and groupQuery.groupName!=''">
                AND group_name LIKE CONCAT('%', #{groupQuery.groupName}, '%')
            </if>
        </where>
    </select>
    
    <select id="queryByName" resultType="java.lang.Integer">
        select count(1) from fun_group where group_name = #{groupName} and project_id = #{projectId}
    </select>

    <select id="queryGroupById" resultMap="BaseResultMap">
        select  <include refid="Base_Column_List"/> from fun_group where group_id = #{groupId}
    </select>

    <update id="updateGroup" parameterType="com.remote.modules.group.entity.GroupEntity">
        update fun_group
        <set>
            <if test="groupEntity.groupName != null">
                group_name = #{groupEntity.groupName},
            </if>
            update_user = #{groupEntity.updateUser},
            update_time = now()
        </set>
        where group_id = #{groupEntity.groupId}
    </update>

    <delete id="deleteGroupById">
        delete from fun_group where group_id = #{groupId}
    </delete>

</mapper>